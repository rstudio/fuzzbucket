name: main
on: [push, pull_request]
env:
  AWS_DEFAULT_REGION: us-east-1
jobs:
  default:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - run: git fetch --prune --unshallow
    - uses: actions/setup-python@master
      with:
        python-version: 3.8.x
        architecture: x64
    - uses: actions/setup-node@master
      with:
        node-version: 12.x
    - uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - uses: actions/cache@v1
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - run: pip install -U pipenv
    - run: make deps
    - run: pipenv check
    - run: make lint
    - run: make test
    - run: make release-artifact
      id: create_release_artifact
    - run: pipenv run pip install -vvv ${{ steps.create_release_artifact.outputs.tarball }}
    - run: pipenv run fuzzbucket-client --version
    - run: pipenv run fuzzbucket-client --help
    - run: make is-releasable
      id: check_releasable
    - if: ${{ fromJson(steps.check_releasable.outputs.releasable) }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - if: ${{ fromJson(steps.check_releasable.outputs.releasable) }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.create_release_artifact.outputs.tarball }}
        asset_name: ${{ steps.create_release_artifact.outputs.tarball_basename }}
        asset_content_type: application/x-wheel+zip
    - uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET }}
        aws-region: us-east-1
    - if: ${{ fromJson(steps.check_releasable.outputs.releasable) }}
      run: make sync-to-s3
    - if: ${{ fromJson(steps.check_releasable.outputs.releasable) }}
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}
    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
